// Package lawapi provides client library for Japan Law API
// Version: 2.1.138
// Code generated by clientgen; DO NOT EDIT.

package lawapi

import (
	"encoding/json"
	"strings"
	"time"
)

// DefaultBaseURL is the default base URL for the API
const DefaultBaseURL = "https://laws.e-gov.go.jp/api/2"

// AmendmentType represents amendmenttype * `1` - 新規 * `3` - 被amendment * `8` - repeal
type AmendmentType string

const (
	AmendmentType1 AmendmentType = "1"
	AmendmentType3 AmendmentType = "3"
	AmendmentType8 AmendmentType = "8"
)

// AttachedFile represents field from the API response
type AttachedFile struct {
	// LawRevisionId represents law ID
	LawRevisionId string `json:"law_revision_id,omitempty"`
	// Src represents 法令XML中のFig要素のsrc属性
	Src string `json:"src,omitempty"`
	// Updated represents field from the API response
	Updated DateTime `json:"updated,omitempty"`
}

// AttachedFilesInfo represents field from the API response
type AttachedFilesInfo struct {
	// AttachedFiles represents field from the API response
	AttachedFiles *[]AttachedFile `json:"attached_files,omitempty"`
	// ImageData represents field from the API response
	ImageData string `json:"image_data,omitempty"`
}

// CategoryCd represents field from the API response
type CategoryCd string

const (
	CategoryCd001 CategoryCd = "001"
	CategoryCd002 CategoryCd = "002"
	CategoryCd003 CategoryCd = "003"
	CategoryCd004 CategoryCd = "004"
	CategoryCd005 CategoryCd = "005"
	CategoryCd006 CategoryCd = "006"
	CategoryCd007 CategoryCd = "007"
	CategoryCd008 CategoryCd = "008"
	CategoryCd009 CategoryCd = "009"
	CategoryCd010 CategoryCd = "010"
	CategoryCd011 CategoryCd = "011"
	CategoryCd012 CategoryCd = "012"
	CategoryCd013 CategoryCd = "013"
	CategoryCd014 CategoryCd = "014"
	CategoryCd015 CategoryCd = "015"
	CategoryCd016 CategoryCd = "016"
	CategoryCd017 CategoryCd = "017"
	CategoryCd018 CategoryCd = "018"
	CategoryCd019 CategoryCd = "019"
	CategoryCd020 CategoryCd = "020"
	CategoryCd021 CategoryCd = "021"
	CategoryCd022 CategoryCd = "022"
	CategoryCd023 CategoryCd = "023"
	CategoryCd024 CategoryCd = "024"
	CategoryCd025 CategoryCd = "025"
	CategoryCd026 CategoryCd = "026"
	CategoryCd027 CategoryCd = "027"
	CategoryCd028 CategoryCd = "028"
	CategoryCd029 CategoryCd = "029"
	CategoryCd030 CategoryCd = "030"
	CategoryCd031 CategoryCd = "031"
	CategoryCd032 CategoryCd = "032"
	CategoryCd033 CategoryCd = "033"
	CategoryCd034 CategoryCd = "034"
	CategoryCd035 CategoryCd = "035"
	CategoryCd036 CategoryCd = "036"
	CategoryCd037 CategoryCd = "037"
	CategoryCd038 CategoryCd = "038"
	CategoryCd039 CategoryCd = "039"
	CategoryCd040 CategoryCd = "040"
	CategoryCd041 CategoryCd = "041"
	CategoryCd042 CategoryCd = "042"
	CategoryCd043 CategoryCd = "043"
	CategoryCd044 CategoryCd = "044"
	CategoryCd045 CategoryCd = "045"
	CategoryCd046 CategoryCd = "046"
	CategoryCd047 CategoryCd = "047"
	CategoryCd048 CategoryCd = "048"
	CategoryCd049 CategoryCd = "049"
	CategoryCd050 CategoryCd = "050"
)

// CurrentRevisionStatus represents historyのstatus: * `CurrentEnforced` - 現施行法令 * `UnEnforced` - 未施行法令 * `PreviousEnforced` - 過去施行法令 * `Repeal` - repeal法令（repeal・失効・実効性喪失）
type CurrentRevisionStatus string

const (
	CurrentRevisionStatusCurrentenforced CurrentRevisionStatus = "CurrentEnforced"
	CurrentRevisionStatusUnenforced CurrentRevisionStatus = "UnEnforced"
	CurrentRevisionStatusPreviousenforced CurrentRevisionStatus = "PreviousEnforced"
	CurrentRevisionStatusRepeal CurrentRevisionStatus = "Repeal"
)

// Elm represents field from the API response
type Elm string

// ErrorInfo represents field from the API response
type ErrorInfo struct {
	// Code represents field from the API response
	Code string `json:"code,omitempty"`
	// Message represents field from the API response
	Message string `json:"message,omitempty"`
}

// FileType represents filetype: * `xml` - XML * `json` - JSON * `html` - HTML * `rtf` - RTF * `docx` - DOCX
type FileType string

const (
	FileTypeXml FileType = "xml"
	FileTypeJson FileType = "json"
	FileTypeHtml FileType = "html"
	FileTypeRtf FileType = "rtf"
	FileTypeDocx FileType = "docx"
)

// KeywordResponse represents field from the API response
type KeywordResponse struct {
	// Items represents law ID単位のinformationリスト * `revision_info` - 指定時点において効力を持つ版のメタinformation
	Items []KeywordItem `json:"items,omitempty"`
	// NextOffset represents field from the API response
	NextOffset int64 `json:"next_offset,omitempty"`
	// SentenceCount represents レスポンス単位で表示した`sentences`数の総和
	SentenceCount int64 `json:"sentence_count,omitempty"`
	// TotalCount represents 指定`keyword`でヒットした総件数
	TotalCount int64 `json:"total_count,omitempty"`
}

// LawDataResponse represents field from the API response
type LawDataResponse struct {
	AttachedFilesInfo *AttachedFilesInfo `json:"attached_files_info,omitempty"`
	// LawFullText represents field from the API response
	LawFullText *interface{} `json:"law_full_text,omitempty"`
	LawInfo *LawInfo `json:"law_info,omitempty"`
	RevisionInfo *RevisionInfo `json:"revision_info,omitempty"`
}

// LawInfo represents field from the API response
type LawInfo struct {
	// LawId represents law ID
	LawId string `json:"law_id,omitempty"`
	// LawNum represents field from the API response
	LawNum string `json:"law_num,omitempty"`
	// LawNumEra represents field from the API response
	LawNumEra *LawNumEra `json:"law_num_era,omitempty"`
	// LawNumNum represents field from the API response
	LawNumNum string `json:"law_num_num,omitempty"`
	// LawNumType represents field from the API response
	LawNumType *LawNumType `json:"law_num_type,omitempty"`
	// LawNumYear represents field from the API response
	LawNumYear int `json:"law_num_year,omitempty"`
	// LawType represents field from the API response
	LawType *LawType `json:"law_type,omitempty"`
	// PromulgationDate represents field from the API response
	PromulgationDate Date `json:"promulgation_date,omitempty"`
}

// LawNumEra represents field from the API response
type LawNumEra string

const (
	LawNumEraMeiji LawNumEra = "Meiji"
	LawNumEraTaisho LawNumEra = "Taisho"
	LawNumEraShowa LawNumEra = "Showa"
	LawNumEraHeisei LawNumEra = "Heisei"
	LawNumEraReiwa LawNumEra = "Reiwa"
)

// LawNumType represents law numberの法令type: * `Constitution` - 憲法 * `Act` - 法律 * `CabinetOrder` - 政令 * `ImperialOrder` - 勅令 * `MinisterialOrdinance` - 府省令 * `Rule` - 規則 * `Misc` - その他
type LawNumType string

const (
	LawNumTypeConstitution LawNumType = "Constitution"
	LawNumTypeAct LawNumType = "Act"
	LawNumTypeCabinetorder LawNumType = "CabinetOrder"
	LawNumTypeImperialorder LawNumType = "ImperialOrder"
	LawNumTypeMinisterialordinance LawNumType = "MinisterialOrdinance"
	LawNumTypeRule LawNumType = "Rule"
	LawNumTypeMisc LawNumType = "Misc"
)

// LawRevisionsResponse represents field from the API response
type LawRevisionsResponse struct {
	LawInfo LawInfo `json:"law_info"`
	// Revisions represents field from the API response
	Revisions []RevisionInfo `json:"revisions"`
}

// LawType represents 法令type: * `Constitution` - 憲法 * `Act` - 法律 * `CabinetOrder` - 政令 * `ImperialOrder` - 勅令 * `MinisterialOrdinance` - 府省令 * `Rule` - 規則 * `Misc` - その他
type LawType string

const (
	LawTypeConstitution LawType = "Constitution"
	LawTypeAct LawType = "Act"
	LawTypeCabinetorder LawType = "CabinetOrder"
	LawTypeImperialorder LawType = "ImperialOrder"
	LawTypeMinisterialordinance LawType = "MinisterialOrdinance"
	LawTypeRule LawType = "Rule"
	LawTypeMisc LawType = "Misc"
)

// LawsResponse represents field from the API response
type LawsResponse struct {
	// Count represents field from the API response
	Count int64 `json:"count"`
	// Laws represents field from the API response
	Laws []LawItem `json:"laws,omitempty"`
	// NextOffset represents field from the API response
	NextOffset int64 `json:"next_offset,omitempty"`
	// TotalCount represents field from the API response
	TotalCount int64 `json:"total_count,omitempty"`
}

// Mission represents 新規制定又は被amendment法令（`New`）・一部amendment法令（`Partial`） * `New` - 新規制定 * `Partial` - 一部amendment
type Mission string

const (
	MissionNew Mission = "New"
	MissionPartial Mission = "Partial"
)

// RepealStatus represents repeal等のstatus: * `None` - repeal・失効等のstatusなし * `Repeal` - repeal * `Expire` - 失効 * `Suspend` - 停止 * `LossOfEffectiveness` - 実効性喪失
type RepealStatus string

const (
	RepealStatusNone RepealStatus = "None"
	RepealStatusRepeal RepealStatus = "Repeal"
	RepealStatusExpire RepealStatus = "Expire"
	RepealStatusSuspend RepealStatus = "Suspend"
	RepealStatusLossofeffectiveness RepealStatus = "LossOfEffectiveness"
)

// ResponseFormat represents レスポンスformat（`json` 又は `xml`）
type ResponseFormat string

const (
	ResponseFormatJson ResponseFormat = "json"
	ResponseFormatXml ResponseFormat = "xml"
)

// RevisionInfo represents field from the API response
type RevisionInfo struct {
	// Abbrev represents field from the API response
	Abbrev string `json:"abbrev,omitempty"`
	// AmendmentEnforcementComment represents field from the API response
	AmendmentEnforcementComment string `json:"amendment_enforcement_comment,omitempty"`
	// AmendmentEnforcementDate represents field from the API response
	AmendmentEnforcementDate Date `json:"amendment_enforcement_date,omitempty"`
	// AmendmentLawId represents field from the API response
	AmendmentLawId string `json:"amendment_law_id,omitempty"`
	// AmendmentLawNum represents field from the API response
	AmendmentLawNum string `json:"amendment_law_num,omitempty"`
	// AmendmentLawTitle represents field from the API response
	AmendmentLawTitle string `json:"amendment_law_title,omitempty"`
	// AmendmentLawTitleKana represents field from the API response
	AmendmentLawTitleKana string `json:"amendment_law_title_kana,omitempty"`
	// AmendmentPromulgateDate represents field from the API response
	AmendmentPromulgateDate Date `json:"amendment_promulgate_date,omitempty"`
	// AmendmentScheduledEnforcementDate represents field from the API response
	AmendmentScheduledEnforcementDate Date `json:"amendment_scheduled_enforcement_date,omitempty"`
	// AmendmentType represents field from the API response
	AmendmentType *AmendmentType `json:"amendment_type,omitempty"`
	// Category represents field from the API response
	Category string `json:"category,omitempty"`
	// CurrentRevisionStatus represents field from the API response
	CurrentRevisionStatus *CurrentRevisionStatus `json:"current_revision_status,omitempty"`
	// LawRevisionId represents field from the API response
	LawRevisionId string `json:"law_revision_id,omitempty"`
	// LawTitle represents field from the API response
	LawTitle string `json:"law_title,omitempty"`
	// LawTitleKana represents field from the API response
	LawTitleKana string `json:"law_title_kana,omitempty"`
	// LawType represents field from the API response
	LawType *LawType `json:"law_type,omitempty"`
	// Mission represents 新規制定又は被amendment法令（`New`）・一部amendment法令（`Partial`）
	Mission *Mission `json:"mission,omitempty"`
	// RemainInForce represents field from the API response
	RemainInForce bool `json:"remain_in_force,omitempty"`
	// RepealDate represents field from the API response
	RepealDate Date `json:"repeal_date,omitempty"`
	// RepealStatus represents field from the API response
	RepealStatus *RepealStatus `json:"repeal_status,omitempty"`
	// Updated represents field from the API response
	Updated DateTime `json:"updated,omitempty"`
}

// LawItem represents a single law entry from the laws array
type LawItem struct {
	// LawInfo represents law information independent of revision history
	LawInfo *LawInfo `json:"law_info,omitempty"`
	// RevisionInfo represents law information for the retrieved revision history
	RevisionInfo *RevisionInfo `json:"revision_info,omitempty"`
	// CurrentRevisionInfo represents the latest revision information
	CurrentRevisionInfo *RevisionInfo `json:"current_revision_info,omitempty"`
}

// KeywordItem represents a single item from keyword search results
type KeywordItem struct {
	// LawInfo represents law information independent of revision history
	LawInfo *LawInfo `json:"law_info,omitempty"`
	// RevisionInfo represents law information for the retrieved revision history
	RevisionInfo *RevisionInfo `json:"revision_info,omitempty"`
	// Sentences represents matching sentences from the search
	Sentences []KeywordSentence `json:"sentences,omitempty"`
}

// KeywordSentence represents a sentence match from keyword search
type KeywordSentence struct {
	// Text represents the matching text content
	Text string `json:"text,omitempty"`
	// Position represents the position information
	Position string `json:"position,omitempty"`
}

// Date represents a date in YYYY-MM-DD format
type Date time.Time

// UnmarshalJSON implements json.Unmarshaler for Date
func (d *Date) UnmarshalJSON(data []byte) error {
	if string(data) == "null" || string(data) == "\"\"" {
		return nil
	}
	str := strings.Trim(string(data), "\"")
	t, err := time.Parse("2006-01-02", str)
	if err != nil {
		return err
	}
	*d = Date(t)
	return nil
}

// MarshalJSON implements json.Marshaler for Date
func (d Date) MarshalJSON() ([]byte, error) {
	return json.Marshal(time.Time(d).Format("2006-01-02"))
}

// String returns the string representation of the date
func (d Date) String() string {
	return time.Time(d).Format("2006-01-02")
}

// DateTime represents a date-time in RFC3339 format
type DateTime time.Time

// UnmarshalJSON implements json.Unmarshaler for DateTime
func (dt *DateTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" || string(data) == "\"\"" {
		return nil
	}
	str := strings.Trim(string(data), "\"")
	// Try RFC3339 format first
	t, err := time.Parse(time.RFC3339, str)
	if err != nil {
		// Fallback to date-only format
		t, err = time.Parse("2006-01-02", str)
		if err != nil {
			return err
		}
	}
	*dt = DateTime(t)
	return nil
}

// MarshalJSON implements json.Marshaler for DateTime
func (dt DateTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(time.Time(dt).Format(time.RFC3339))
}

// String returns the string representation of the date-time
func (dt DateTime) String() string {
	return time.Time(dt).Format(time.RFC3339)
}


